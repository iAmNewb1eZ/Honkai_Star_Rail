generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  A_id       String  @id @db.VarChar(10)
  A_name     String? @db.VarChar(100)
  A_password String? @db.VarChar(100)
}

model character {
  C_id             Int                   @id
  C_name           String?               @db.VarChar(100)
  C_path           character_C_path?
  C_element        character_C_element?
  C_role           character_C_role?
  C_rarelity       character_C_rarelity?
  C_images         String?               @db.VarChar(100)
  recomment_record recomment_record[]
}

model lightcone {
  LC_id            String                 @id @db.VarChar(10)
  LC_name          String?                @db.VarChar(100)
  LC_path          lightcone_LC_path?
  LC_Effect        String?                @db.Text
  LC_images        String?                @db.VarChar(100)
  LC_rarelity      lightcone_LC_rarelity?
  recomment_record recomment_record[]
}

model planar_ornaments {
  PO_id            String             @id @db.VarChar(10)
  PO_name          String?            @db.VarChar(100)
  PO_Effect        String?            @db.Text
  recomment_record recomment_record[]
}

model recomment_record {
  RC_id            Int               @id @default(autoincrement())
  RC_name          String?           @db.VarChar(100)
  C_id             Int?
  C_name           String?           @db.VarChar(100)
  R_id             String?           @db.VarChar(10)
  R_name           String?           @db.VarChar(100)
  R_Effect_4       String?           @db.Text
  LC_id            String?           @db.VarChar(10)
  LC_name          String?           @db.VarChar(100)
  LC_Effect        String?           @db.Text
  PO_id            String?           @db.VarChar(10)
  PO_name          String?           @db.VarChar(100)
  PO_Effect        String?           @db.Text
  uid              Int?
  character        character?        @relation(fields: [C_id], references: [C_id], onDelete: NoAction, onUpdate: NoAction, map: "recomment_record_character_FK")
  lightcone        lightcone?        @relation(fields: [LC_id], references: [LC_id], onDelete: NoAction, onUpdate: NoAction, map: "recommentrecord_lightcone_FK")
  planar_ornaments planar_ornaments? @relation(fields: [PO_id], references: [PO_id], onDelete: NoAction, onUpdate: NoAction, map: "recommentrecord_planar_ornaments_FK")
  relic_set        relic_set?        @relation(fields: [R_id], references: [R_id], onDelete: NoAction, onUpdate: NoAction, map: "recommentrecord_relic_set_FK")
  user             user?             @relation(fields: [uid], references: [uid], onDelete: NoAction, onUpdate: NoAction, map: "recomment_record_user_FK")

  @@index([C_id], map: "recomment_record_character_FK")
  @@index([uid], map: "recomment_record_user_FK")
  @@index([LC_id], map: "recomment_record_lightcone_FK")
  @@index([PO_id], map: "recomment_record_planar_ornaments_FK")
  @@index([R_id], map: "recomment_record_relic_set_FK")
}

model relic_set {
  R_id             String             @id @db.VarChar(15)
  R_name           String?            @db.VarChar(100)
  R_Effect_2       String?            @db.Text
  R_Effect_4       String?            @db.Text
  recomment_record recomment_record[]
}

model user {
  uid              Int                @id
  uname            String?            @db.VarChar(100)
  upassword        String?            @db.VarChar(100)
  recomment_record recomment_record[]
}

enum character_C_path {
  Destruction
  Preservation
  Nihility
  The_Hunt     @map("The Hunt")
  Harmony
  Erudition
  Abundance
}

enum lightcone_LC_path {
  Destruction
  Preservation
  Nihility
  The_Hunt     @map("The Hunt")
  Harmony
  Erudition
  Abundance
}

enum character_C_element {
  Ice
  Fire
  Quantum
  Wind
  Lightning
  Physical
  Imaginary
}

enum character_C_role {
  DPS
  Debuffer
  Buffer
  Tank
  Healer
}

enum lightcone_LC_rarelity {
  FIVE
  FOUR
}

enum character_C_rarelity {
  FIVE
  FOUR
}
